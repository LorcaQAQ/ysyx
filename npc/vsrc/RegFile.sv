// Generated by CIRCT firtool-1.62.1
module RegFile(
  input         clock,
  input  [31:0] io_wdata,
  input  [3:0]  io_waddr,
  input         io_wen,
  input  [3:0]  io_raddr1,
                io_raddr2,
  output [31:0] io_rdata1,
                io_rdata2
);

  reg  [31:0]       regfile_1;
  reg  [31:0]       regfile_2;
  reg  [31:0]       regfile_3;
  reg  [31:0]       regfile_4;
  reg  [31:0]       regfile_5;
  reg  [31:0]       regfile_6;
  reg  [31:0]       regfile_7;
  reg  [31:0]       regfile_8;
  reg  [31:0]       regfile_9;
  reg  [31:0]       regfile_10;
  reg  [31:0]       regfile_11;
  reg  [31:0]       regfile_12;
  reg  [31:0]       regfile_13;
  reg  [31:0]       regfile_14;
  reg  [31:0]       regfile_15;
  wire [15:0][31:0] _GEN =
    {{regfile_15},
     {regfile_14},
     {regfile_13},
     {regfile_12},
     {regfile_11},
     {regfile_10},
     {regfile_9},
     {regfile_8},
     {regfile_7},
     {regfile_6},
     {regfile_5},
     {regfile_4},
     {regfile_3},
     {regfile_2},
     {regfile_1},
     {32'h0}};
  always @(posedge clock) begin
    if (io_waddr == 4'h1) begin
      if (io_wen)
        regfile_1 <= io_wdata;
      else
        regfile_1 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h2) begin
      if (io_wen)
        regfile_2 <= io_wdata;
      else
        regfile_2 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h3) begin
      if (io_wen)
        regfile_3 <= io_wdata;
      else
        regfile_3 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h4) begin
      if (io_wen)
        regfile_4 <= io_wdata;
      else
        regfile_4 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h5) begin
      if (io_wen)
        regfile_5 <= io_wdata;
      else
        regfile_5 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h6) begin
      if (io_wen)
        regfile_6 <= io_wdata;
      else
        regfile_6 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h7) begin
      if (io_wen)
        regfile_7 <= io_wdata;
      else
        regfile_7 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h8) begin
      if (io_wen)
        regfile_8 <= io_wdata;
      else
        regfile_8 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'h9) begin
      if (io_wen)
        regfile_9 <= io_wdata;
      else
        regfile_9 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'hA) begin
      if (io_wen)
        regfile_10 <= io_wdata;
      else
        regfile_10 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'hB) begin
      if (io_wen)
        regfile_11 <= io_wdata;
      else
        regfile_11 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'hC) begin
      if (io_wen)
        regfile_12 <= io_wdata;
      else
        regfile_12 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'hD) begin
      if (io_wen)
        regfile_13 <= io_wdata;
      else
        regfile_13 <= _GEN[io_waddr];
    end
    if (io_waddr == 4'hE) begin
      if (io_wen)
        regfile_14 <= io_wdata;
      else
        regfile_14 <= _GEN[io_waddr];
    end
    if (&io_waddr) begin
      if (io_wen)
        regfile_15 <= io_wdata;
      else
        regfile_15 <= _GEN[io_waddr];
    end
  end // always @(posedge)
  reg_display #(
    .ADDR_WIDTH(4),
    .DATA_WIDTH(32)
  ) reg_display (
    .regfile
      ({regfile_15,
        regfile_14,
        regfile_13,
        regfile_12,
        regfile_11,
        regfile_10,
        regfile_9,
        regfile_8,
        regfile_7,
        regfile_6,
        regfile_5,
        regfile_4,
        regfile_3,
        regfile_2,
        regfile_1,
        32'h0})
  );
  assign io_rdata1 = _GEN[io_raddr1];
  assign io_rdata2 = _GEN[io_raddr2];
endmodule

