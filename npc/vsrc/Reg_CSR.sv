// Generated by CIRCT firtool-1.62.1
module Reg_CSR(
  input         clock,
                reset,
  input  [4:0]  io_in_idu_to_regfile_rs1_addr,
                io_in_idu_to_regfile_rs2_addr,
  input  [11:0] io_in_idu_to_csr_csr_r_addr,
  output [31:0] io_out_regfile_to_exu_rs1,
                io_out_regfile_to_exu_rs2,
                io_out_csr_to_exu_csr,
  input         io_in_from_mem_valid,
  input  [4:0]  io_in_from_mem_bits_alu_op,
  input         io_in_from_mem_bits_rf_wen,
  input  [2:0]  io_in_from_mem_bits_rf_wdata_sel,
  input  [4:0]  io_in_from_mem_bits_rd_addr,
  input  [31:0] io_in_from_mem_bits_result,
                io_in_from_mem_bits_mem_rdata,
                io_in_from_mem_bits_snpc,
                io_in_from_mem_bits_pc,
                io_in_from_mem_bits_csr_r_w_addr,
                io_in_from_mem_bits_csr_result,
  input  [1:0]  io_in_from_mem_bits_csr_r_w_ctrl,
  input  [31:0] io_in_from_mem_bits_imm,
  input  [1:0]  io_in_from_mem_bits_jump_op,
  output        io_out_to_ifu_valid,
  output [31:0] io_out_to_ifu_bits_dnpc
);

  wire [31:0] _csr_io_csr_pc;
  reg         valid_to_ifu;
  reg  [4:0]  alu_op;
  reg  [2:0]  rf_wdata_sel;
  reg         rf_wen;
  reg  [4:0]  rd_addr;
  reg  [31:0] result;
  reg  [31:0] mem_data;
  reg  [31:0] snpc;
  reg  [31:0] pc;
  reg  [11:0] csr_r_w_addr;
  reg  [1:0]  csr_r_w_ctrl;
  reg  [31:0] csr_result;
  reg  [1:0]  jump_op;
  reg  [31:0] imm;
  reg  [31:0] regfile_1;
  reg  [31:0] regfile_2;
  reg  [31:0] regfile_3;
  reg  [31:0] regfile_4;
  reg  [31:0] regfile_5;
  reg  [31:0] regfile_6;
  reg  [31:0] regfile_7;
  reg  [31:0] regfile_8;
  reg  [31:0] regfile_9;
  reg  [31:0] regfile_10;
  reg  [31:0] regfile_11;
  reg  [31:0] regfile_12;
  reg  [31:0] regfile_13;
  reg  [31:0] regfile_14;
  reg  [31:0] regfile_15;
  reg  [31:0] casez_tmp;
  always_comb begin
    casez (rd_addr[3:0])
      4'b0000:
        casez_tmp = 32'h0;
      4'b0001:
        casez_tmp = regfile_1;
      4'b0010:
        casez_tmp = regfile_2;
      4'b0011:
        casez_tmp = regfile_3;
      4'b0100:
        casez_tmp = regfile_4;
      4'b0101:
        casez_tmp = regfile_5;
      4'b0110:
        casez_tmp = regfile_6;
      4'b0111:
        casez_tmp = regfile_7;
      4'b1000:
        casez_tmp = regfile_8;
      4'b1001:
        casez_tmp = regfile_9;
      4'b1010:
        casez_tmp = regfile_10;
      4'b1011:
        casez_tmp = regfile_11;
      4'b1100:
        casez_tmp = regfile_12;
      4'b1101:
        casez_tmp = regfile_13;
      4'b1110:
        casez_tmp = regfile_14;
      default:
        casez_tmp = regfile_15;
    endcase
  end // always_comb
  wire        branch_en =
    jump_op == 2'h2 & result == 32'h0
    & (alu_op == 5'h4 | alu_op == 5'hB | alu_op == 5'hC | alu_op == 5'hE | alu_op == 5'hF
       | alu_op == 5'h11);
  reg  [31:0] casez_tmp_0;
  always_comb begin
    casez (jump_op)
      2'b00:
        casez_tmp_0 = pc;
      2'b01:
        casez_tmp_0 = result;
      2'b10:
        casez_tmp_0 = branch_en ? pc + imm : pc;
      default:
        casez_tmp_0 = _csr_io_csr_pc;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_1;
  always_comb begin
    casez (io_in_idu_to_regfile_rs1_addr[3:0])
      4'b0000:
        casez_tmp_1 = 32'h0;
      4'b0001:
        casez_tmp_1 = regfile_1;
      4'b0010:
        casez_tmp_1 = regfile_2;
      4'b0011:
        casez_tmp_1 = regfile_3;
      4'b0100:
        casez_tmp_1 = regfile_4;
      4'b0101:
        casez_tmp_1 = regfile_5;
      4'b0110:
        casez_tmp_1 = regfile_6;
      4'b0111:
        casez_tmp_1 = regfile_7;
      4'b1000:
        casez_tmp_1 = regfile_8;
      4'b1001:
        casez_tmp_1 = regfile_9;
      4'b1010:
        casez_tmp_1 = regfile_10;
      4'b1011:
        casez_tmp_1 = regfile_11;
      4'b1100:
        casez_tmp_1 = regfile_12;
      4'b1101:
        casez_tmp_1 = regfile_13;
      4'b1110:
        casez_tmp_1 = regfile_14;
      default:
        casez_tmp_1 = regfile_15;
    endcase
  end // always_comb
  reg  [31:0] casez_tmp_2;
  always_comb begin
    casez (io_in_idu_to_regfile_rs2_addr[3:0])
      4'b0000:
        casez_tmp_2 = 32'h0;
      4'b0001:
        casez_tmp_2 = regfile_1;
      4'b0010:
        casez_tmp_2 = regfile_2;
      4'b0011:
        casez_tmp_2 = regfile_3;
      4'b0100:
        casez_tmp_2 = regfile_4;
      4'b0101:
        casez_tmp_2 = regfile_5;
      4'b0110:
        casez_tmp_2 = regfile_6;
      4'b0111:
        casez_tmp_2 = regfile_7;
      4'b1000:
        casez_tmp_2 = regfile_8;
      4'b1001:
        casez_tmp_2 = regfile_9;
      4'b1010:
        casez_tmp_2 = regfile_10;
      4'b1011:
        casez_tmp_2 = regfile_11;
      4'b1100:
        casez_tmp_2 = regfile_12;
      4'b1101:
        casez_tmp_2 = regfile_13;
      4'b1110:
        casez_tmp_2 = regfile_14;
      default:
        casez_tmp_2 = regfile_15;
    endcase
  end // always_comb
  wire [31:0] wr_data =
    rf_wdata_sel == 3'h1
      ? result
      : rf_wdata_sel == 3'h3 ? mem_data : rf_wdata_sel == 3'h2 ? snpc : 32'h0;
  always @(posedge clock) begin
    if (reset) begin
      valid_to_ifu <= 1'h0;
      alu_op <= 5'h0;
      rf_wdata_sel <= 3'h0;
      rf_wen <= 1'h0;
      rd_addr <= 5'h0;
      result <= 32'h0;
      mem_data <= 32'h0;
      snpc <= 32'h0;
      pc <= 32'h0;
      csr_r_w_addr <= 12'h0;
      csr_r_w_ctrl <= 2'h0;
      csr_result <= 32'h0;
      jump_op <= 2'h0;
      imm <= 32'h0;
    end
    else begin
      valid_to_ifu <= io_in_from_mem_valid;
      if (io_in_from_mem_valid) begin
        alu_op <= io_in_from_mem_bits_alu_op;
        rf_wdata_sel <= io_in_from_mem_bits_rf_wdata_sel;
        rf_wen <= io_in_from_mem_bits_rf_wen;
        rd_addr <= io_in_from_mem_bits_rd_addr;
        result <= io_in_from_mem_bits_result;
        mem_data <= io_in_from_mem_bits_mem_rdata;
        snpc <= io_in_from_mem_bits_snpc;
        pc <= io_in_from_mem_bits_pc;
        csr_r_w_ctrl <= io_in_from_mem_bits_csr_r_w_ctrl;
        csr_result <= io_in_from_mem_bits_csr_result;
        jump_op <= io_in_from_mem_bits_jump_op;
        imm <= io_in_from_mem_bits_imm;
      end
      csr_r_w_addr <=
        io_in_from_mem_valid ? io_in_from_mem_bits_csr_r_w_addr[11:0] : csr_r_w_addr;
    end
    if (rd_addr[3:0] == 4'h1) begin
      if (rf_wen)
        regfile_1 <= wr_data;
      else
        regfile_1 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h2) begin
      if (rf_wen)
        regfile_2 <= wr_data;
      else
        regfile_2 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h3) begin
      if (rf_wen)
        regfile_3 <= wr_data;
      else
        regfile_3 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h4) begin
      if (rf_wen)
        regfile_4 <= wr_data;
      else
        regfile_4 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h5) begin
      if (rf_wen)
        regfile_5 <= wr_data;
      else
        regfile_5 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h6) begin
      if (rf_wen)
        regfile_6 <= wr_data;
      else
        regfile_6 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h7) begin
      if (rf_wen)
        regfile_7 <= wr_data;
      else
        regfile_7 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h8) begin
      if (rf_wen)
        regfile_8 <= wr_data;
      else
        regfile_8 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'h9) begin
      if (rf_wen)
        regfile_9 <= wr_data;
      else
        regfile_9 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'hA) begin
      if (rf_wen)
        regfile_10 <= wr_data;
      else
        regfile_10 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'hB) begin
      if (rf_wen)
        regfile_11 <= wr_data;
      else
        regfile_11 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'hC) begin
      if (rf_wen)
        regfile_12 <= wr_data;
      else
        regfile_12 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'hD) begin
      if (rf_wen)
        regfile_13 <= wr_data;
      else
        regfile_13 <= casez_tmp;
    end
    if (rd_addr[3:0] == 4'hE) begin
      if (rf_wen)
        regfile_14 <= wr_data;
      else
        regfile_14 <= casez_tmp;
    end
    if (&(rd_addr[3:0])) begin
      if (rf_wen)
        regfile_15 <= wr_data;
      else
        regfile_15 <= casez_tmp;
    end
  end // always @(posedge)
  CSRs csr (
    .clock           (clock),
    .reset           (reset),
    .io_pc           (pc),
    .io_csr_w_data   (csr_result),
    .io_csr_r_addr   (io_in_idu_to_csr_csr_r_addr),
    .io_csr_w_addr   (csr_r_w_addr),
    .io_csr_r_w_ctrl (csr_r_w_ctrl),
    .io_csr_r_data   (io_out_csr_to_exu_csr),
    .io_csr_pc       (_csr_io_csr_pc)
  );
  reg_display #(
    .ADDR_WIDTH(4),
    .DATA_WIDTH(32)
  ) reg_display (
    .regfile
      ({regfile_15,
        regfile_14,
        regfile_13,
        regfile_12,
        regfile_11,
        regfile_10,
        regfile_9,
        regfile_8,
        regfile_7,
        regfile_6,
        regfile_5,
        regfile_4,
        regfile_3,
        regfile_2,
        regfile_1,
        32'h0})
  );
  assign io_out_regfile_to_exu_rs1 = casez_tmp_1;
  assign io_out_regfile_to_exu_rs2 = casez_tmp_2;
  assign io_out_to_ifu_valid = valid_to_ifu;
  assign io_out_to_ifu_bits_dnpc =
    jump_op == 2'h1 | (&jump_op) | branch_en ? casez_tmp_0 : snpc;
endmodule

