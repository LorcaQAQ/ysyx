// Generated by CIRCT firtool-1.62.1
module EXU(
  input         clock,
                reset,
                io_in_from_idu_valid,
  input  [4:0]  io_in_from_idu_bits_alu_op,
  input  [2:0]  io_in_from_idu_bits_alu_op1_sel,
                io_in_from_idu_bits_alu_op2_sel,
                io_in_from_idu_bits_rf_wdata_sel,
  input         io_in_from_idu_bits_rf_wen,
  input  [31:0] io_in_from_idu_bits_imm,
  input  [4:0]  io_in_from_idu_bits_rd_addr,
  input         io_in_from_idu_bits_mem_wen,
                io_in_from_idu_bits_mem_ren,
  input  [11:0] io_in_from_idu_bits_csr_r_w_addr,
  input  [1:0]  io_in_from_idu_bits_csr_r_w_ctrl,
  input  [31:0] io_in_from_idu_bits_pc,
                io_in_from_idu_bits_snpc,
  input  [1:0]  io_in_from_idu_bits_jump_op,
  input  [2:0]  io_in_from_idu_bits_load_store_range,
                io_in_from_idu_bits_csr_alu_op,
  input  [31:0] io_in_from_regfile_rs1,
                io_in_from_regfile_rs2,
                io_in_from_csr_csr,
  output        io_out_valid,
  output [4:0]  io_out_bits_alu_op,
  output [2:0]  io_out_bits_rf_wdata_sel,
  output        io_out_bits_rf_wen,
  output [31:0] io_out_bits_rd_addr,
                io_out_bits_result,
  output [2:0]  io_out_bits_load_store_range,
  output        io_out_bits_mem_wen,
                io_out_bits_mem_ren,
  output [31:0] io_out_bits_rs2,
                io_out_bits_snpc,
                io_out_bits_pc,
                io_out_bits_imm,
  output [1:0]  io_out_bits_jump_op,
  output [31:0] io_out_bits_csr_result,
  output [11:0] io_out_bits_csr_r_w_addr,
  output [1:0]  io_out_bits_csr_r_w_ctrl
);

  reg         valid_to_mem;
  reg  [4:0]  rd_addr;
  reg  [31:0] imm;
  reg         rf_wen;
  reg  [2:0]  rf_wdata_sel;
  reg  [4:0]  alu_op;
  reg  [1:0]  jump_op;
  reg         mem_wen;
  reg         mem_ren;
  reg  [2:0]  load_store_range;
  reg  [2:0]  csr_alu_op;
  reg  [1:0]  csr_r_w_ctrl;
  reg  [11:0] csr_r_w_addr;
  reg  [31:0] val1;
  reg  [31:0] val2;
  reg  [31:0] pc;
  reg  [31:0] snpc;
  reg  [31:0] casez_tmp;
  always_comb begin
    casez (io_in_from_idu_bits_alu_op2_sel)
      3'b000:
        casez_tmp = io_in_from_regfile_rs2;
      3'b001:
        casez_tmp = io_in_from_idu_bits_imm;
      3'b010:
        casez_tmp = io_in_from_idu_bits_imm;
      3'b011:
        casez_tmp = io_in_from_idu_bits_imm;
      3'b100:
        casez_tmp = io_in_from_idu_bits_imm;
      3'b101:
        casez_tmp = io_in_from_regfile_rs2;
      3'b110:
        casez_tmp = io_in_from_csr_csr;
      default:
        casez_tmp = 32'h0;
    endcase
  end // always_comb
  wire [32:0] _diff_T_2 = {1'h0, val1} - {1'h0, val2};
  wire [31:0] _sum_T = val1 + val2;
  wire [31:0] _diff_s_T_2 = val1 - val2;
  wire        le = val1[31] != val2[31] & val2[31] == _diff_s_T_2[31] ^ _diff_s_T_2[31];
  wire        less = le & (|(_diff_T_2[31:0]));
  wire [31:0] _GEN = {27'h0, val2[4:0]};
  wire [62:0] sllvalue = {31'h0, val1} << val2[4:0];
  wire [31:0] or_0 = val1 | val2;
  always @(posedge clock) begin
    if (reset) begin
      valid_to_mem <= 1'h0;
      rd_addr <= 5'h0;
      imm <= 32'h0;
      rf_wen <= 1'h0;
      rf_wdata_sel <= 3'h0;
      alu_op <= 5'h0;
      jump_op <= 2'h0;
      mem_wen <= 1'h0;
      mem_ren <= 1'h0;
      load_store_range <= 3'h0;
      csr_alu_op <= 3'h0;
      csr_r_w_ctrl <= 2'h0;
      csr_r_w_addr <= 12'h0;
      val1 <= 32'h0;
      val2 <= 32'h0;
      pc <= 32'h0;
      snpc <= 32'h0;
    end
    else begin
      valid_to_mem <= io_in_from_idu_valid;
      if (io_in_from_idu_valid) begin
        rd_addr <= io_in_from_idu_bits_rd_addr;
        imm <= io_in_from_idu_bits_imm;
        rf_wen <= io_in_from_idu_bits_rf_wen;
        rf_wdata_sel <= io_in_from_idu_bits_rf_wdata_sel;
        alu_op <= io_in_from_idu_bits_alu_op;
        jump_op <= io_in_from_idu_bits_jump_op;
        mem_wen <= io_in_from_idu_bits_mem_wen;
        mem_ren <= io_in_from_idu_bits_mem_ren;
        load_store_range <= io_in_from_idu_bits_load_store_range;
        csr_alu_op <= io_in_from_idu_bits_csr_alu_op;
        csr_r_w_ctrl <= io_in_from_idu_bits_csr_r_w_ctrl;
        csr_r_w_addr <= io_in_from_idu_bits_csr_r_w_addr;
        val1 <=
          io_in_from_idu_bits_alu_op1_sel == 3'h2
            ? io_in_from_idu_bits_pc
            : io_in_from_idu_bits_alu_op1_sel == 3'h1 ? io_in_from_regfile_rs1 : 32'h0;
        val2 <= casez_tmp;
        pc <= io_in_from_idu_bits_pc;
        snpc <= io_in_from_idu_bits_snpc;
      end
    end
  end // always @(posedge)
  assign io_out_valid = valid_to_mem;
  assign io_out_bits_alu_op = alu_op;
  assign io_out_bits_rf_wdata_sel = rf_wdata_sel;
  assign io_out_bits_rf_wen = rf_wen;
  assign io_out_bits_rd_addr = {27'h0, rd_addr};
  assign io_out_bits_result =
    alu_op == 5'h1
      ? _sum_T
      : alu_op == 5'h2
          ? _sum_T & 32'hFFFFFFFE
          : alu_op == 5'h3
              ? {31'h0, _diff_T_2[32]}
              : alu_op == 5'h4
                  ? {31'h0, ~(|(_diff_T_2[31:0]))}
                  : alu_op == 5'h5
                      ? _diff_T_2[31:0]
                      : alu_op == 5'h6
                          ? val1 ^ val2
                          : alu_op == 5'h7
                              ? $signed($signed(val1) >>> _GEN)
                              : alu_op == 5'h8
                                  ? sllvalue[31:0]
                                  : alu_op == 5'h9
                                      ? val1 & val2
                                      : alu_op == 5'hA
                                          ? or_0
                                          : alu_op == 5'hB
                                              ? {31'h0, le}
                                              : alu_op == 5'hC
                                                  ? {31'h0, |(_diff_T_2[31:0])}
                                                  : alu_op == 5'hD
                                                      ? val1 >> _GEN
                                                      : alu_op == 5'hE
                                                          ? {31'h0, _diff_T_2[32]}
                                                          : alu_op == 5'hF
                                                              ? {31'h0, ~(_diff_T_2[32])}
                                                              : alu_op == 5'h10
                                                                  ? {31'h0, less}
                                                                  : alu_op == 5'h11
                                                                      ? {31'h0, ~less}
                                                                      : alu_op == 5'h12
                                                                          ? val2
                                                                          : 32'h0;
  assign io_out_bits_load_store_range = load_store_range;
  assign io_out_bits_mem_wen = mem_wen;
  assign io_out_bits_mem_ren = mem_ren;
  assign io_out_bits_rs2 = io_in_from_regfile_rs2;
  assign io_out_bits_snpc = snpc;
  assign io_out_bits_pc = pc;
  assign io_out_bits_imm = imm;
  assign io_out_bits_jump_op = jump_op;
  assign io_out_bits_csr_result =
    csr_alu_op == 3'h1 ? val1 : csr_alu_op == 3'h2 ? or_0 : 32'h0;
  assign io_out_bits_csr_r_w_addr = csr_r_w_addr;
  assign io_out_bits_csr_r_w_ctrl = csr_r_w_ctrl;
endmodule

