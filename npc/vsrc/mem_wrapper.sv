// Generated by CIRCT firtool-1.62.1
module mem_wrapper(
  input         clock,
                reset,
                io_in_from_exu_valid,
  input  [4:0]  io_in_from_exu_bits_alu_op,
  input  [2:0]  io_in_from_exu_bits_rf_wdata_sel,
  input         io_in_from_exu_bits_rf_wen,
  input  [31:0] io_in_from_exu_bits_rd_addr,
                io_in_from_exu_bits_result,
  input  [2:0]  io_in_from_exu_bits_load_store_range,
  input         io_in_from_exu_bits_mem_wen,
                io_in_from_exu_bits_mem_ren,
  input  [31:0] io_in_from_exu_bits_rs2,
                io_in_from_exu_bits_snpc,
                io_in_from_exu_bits_pc,
                io_in_from_exu_bits_imm,
  input  [1:0]  io_in_from_exu_bits_jump_op,
  input  [31:0] io_in_from_exu_bits_csr_result,
  input  [11:0] io_in_from_exu_bits_csr_r_w_addr,
  input  [1:0]  io_in_from_exu_bits_csr_r_w_ctrl,
  output        io_out_valid,
  output [4:0]  io_out_bits_alu_op,
  output        io_out_bits_rf_wen,
  output [2:0]  io_out_bits_rf_wdata_sel,
  output [4:0]  io_out_bits_rd_addr,
  output [31:0] io_out_bits_result,
                io_out_bits_mem_rdata,
                io_out_bits_snpc,
                io_out_bits_pc,
                io_out_bits_csr_r_w_addr,
                io_out_bits_csr_result,
  output [1:0]  io_out_bits_csr_r_w_ctrl,
  output [31:0] io_out_bits_imm,
  output [1:0]  io_out_bits_jump_op
);

  wire [31:0] _mem_mem_rdata;
  reg         valid_to_wbu;
  reg  [31:0] result;
  reg  [2:0]  load_store_range;
  reg         mem_wen;
  reg         mem_ren;
  reg         rf_wen;
  reg  [2:0]  rf_wdata_sel;
  reg  [4:0]  rd_addr;
  reg  [1:0]  jump_op;
  reg  [4:0]  alu_op;
  reg  [31:0] snpc;
  reg  [31:0] pc;
  reg  [31:0] imm;
  reg  [31:0] rs2;
  reg  [31:0] csr_result;
  reg  [11:0] csr_r_w_addr;
  reg  [1:0]  csr_r_w_ctrl;
  wire        _mem_rdata_T = load_store_range == 3'h1;
  wire        _mem_rdata_T_5 = load_store_range == 3'h3;
  wire        _mem_rdata_T_1 = load_store_range == 3'h2;
  reg  [31:0] casez_tmp;
  always_comb begin
    casez (load_store_range)
      3'b000:
        casez_tmp = 32'h0;
      3'b001:
        casez_tmp = _mem_mem_rdata;
      3'b010:
        casez_tmp = {24'h0, _mem_mem_rdata[7:0]};
      3'b011:
        casez_tmp = {16'h0, _mem_mem_rdata[15:0]};
      3'b100:
        casez_tmp = {{16{_mem_mem_rdata[15]}}, _mem_mem_rdata[15:0]};
      3'b101:
        casez_tmp = {{24{_mem_mem_rdata[7]}}, _mem_mem_rdata[7:0]};
      3'b110:
        casez_tmp = 32'h0;
      default:
        casez_tmp = 32'h0;
    endcase
  end // always_comb
  always @(posedge clock) begin
    if (reset) begin
      valid_to_wbu <= 1'h0;
      result <= 32'h0;
      load_store_range <= 3'h0;
      mem_wen <= 1'h0;
      mem_ren <= 1'h0;
      rf_wen <= 1'h0;
      rf_wdata_sel <= 3'h0;
      rd_addr <= 5'h0;
      jump_op <= 2'h0;
      alu_op <= 5'h0;
      snpc <= 32'h0;
      pc <= 32'h0;
      imm <= 32'h0;
      rs2 <= 32'h0;
      csr_result <= 32'h0;
      csr_r_w_addr <= 12'h0;
      csr_r_w_ctrl <= 2'h0;
    end
    else begin
      valid_to_wbu <= io_in_from_exu_valid;
      if (io_in_from_exu_valid) begin
        result <= io_in_from_exu_bits_result;
        load_store_range <= io_in_from_exu_bits_load_store_range;
        mem_wen <= io_in_from_exu_bits_mem_wen;
        mem_ren <= io_in_from_exu_bits_mem_ren;
        rf_wen <= io_in_from_exu_bits_rf_wen;
        rf_wdata_sel <= io_in_from_exu_bits_rf_wdata_sel;
        jump_op <= io_in_from_exu_bits_jump_op;
        alu_op <= io_in_from_exu_bits_alu_op;
        snpc <= io_in_from_exu_bits_snpc;
        pc <= io_in_from_exu_bits_pc;
        imm <= io_in_from_exu_bits_imm;
        rs2 <= io_in_from_exu_bits_rs2;
        csr_result <= io_in_from_exu_bits_csr_result;
        csr_r_w_addr <= io_in_from_exu_bits_csr_r_w_addr;
        csr_r_w_ctrl <= io_in_from_exu_bits_csr_r_w_ctrl;
      end
      rd_addr <= io_in_from_exu_valid ? io_in_from_exu_bits_rd_addr[4:0] : rd_addr;
    end
  end // always @(posedge)
  MEM #(
    .DATA_WIDTH(32)
  ) mem (
    .clk       (clock),
    .mem_ren   (mem_ren),
    .mem_wen   (mem_wen),
    .mem_waddr (result),
    .mem_wdata
      (_mem_rdata_T
         ? rs2
         : _mem_rdata_T_5
             ? {16'h0, rs2[15:0]}
             : _mem_rdata_T_1 ? {24'h0, rs2[7:0]} : 32'h0),
    .mem_rdata (_mem_mem_rdata),
    .mem_raddr (result),
    .mem_wmask
      ({4'h0,
        _mem_rdata_T ? 4'hF : {2'h0, _mem_rdata_T_5 ? 2'h3 : {1'h0, _mem_rdata_T_1}}})
  );
  assign io_out_valid = valid_to_wbu;
  assign io_out_bits_alu_op = alu_op;
  assign io_out_bits_rf_wen = rf_wen;
  assign io_out_bits_rf_wdata_sel = rf_wdata_sel;
  assign io_out_bits_rd_addr = rd_addr;
  assign io_out_bits_result = result;
  assign io_out_bits_mem_rdata = casez_tmp;
  assign io_out_bits_snpc = snpc;
  assign io_out_bits_pc = pc;
  assign io_out_bits_csr_r_w_addr = {20'h0, csr_r_w_addr};
  assign io_out_bits_csr_result = csr_result;
  assign io_out_bits_csr_r_w_ctrl = csr_r_w_ctrl;
  assign io_out_bits_imm = imm;
  assign io_out_bits_jump_op = jump_op;
endmodule

