TOPNAME= Core
NXDC_FILES = constr/top.nxdc
INC_PATH =/usr/include/readline
LDFLAGS= -lreadline
VERILATOR_CFLAGS += -MMD --build -cc \
										-O3 --x-assign fast --x-initial fast --noassert
VERILATOR=verilator
WORK_DIR  = $(shell pwd)
BUILD_DIR = $(WORK_DIR)/build
OBJ_DIR = $(BUILD_DIR)/obj_dir
BIN=$(BUILD_DIR)/$(TOPNAME)

TOP_PACKAGE= core
TOP_OJCET= coretop
TOP_MAIN =CoreMain
default: $(BIN)

$(shell mkdir -p $(BUILD_DIR))

# constraint file
SRC_AUTO_BIND = $(abspath $(BUILD_DIR)/auto_bind.cpp)
$(SRC_AUTO_BIND): $(NXDC_FILES)
	python3 $(NVBOARD_HOME)/scripts/auto_pin_bind.py $^ $@



# rules for NVBoard
include $(NVBOARD_HOME)/scripts/nvboard.mk
# Include variables and rules generated by menuconfig
-include $(NPC_HOME)/include/config/auto.conf
-include $(NPC_HOME)/include/config/auto.conf.cmd




# search v files
VSOURCES=$(shell find $(abspath ./vsrc) -name "*.sv" -or -name "*.v")
# testbench cpp files
#DIRS-BLACKLIST-y = $(WORK_DIR)/tools
DIRS-BLACKLIST-y += $(DIRS-BLACKLIST)
SRCS-BLACKLIST-y = $(shell find -L $(DIRS-BLACKLIST-y) -name "*.c" -or -name "*.cc" -or -name "*.cpp")
#SIM_SRCS-y=$(shell find $(abspath ./csrc) -name "*.c" -or -name "*.cc" -or -name "*.cpp")
SIM_SRCS-y +=$(shell find  $(abspath $(DIRS-y)) -name "*.c" -or -name "*.cc" -or -name "*.cpp")
SIM_SRCS = $(filter-out $(SRCS-BLACKLIST-y),$(SIM_SRCS-y))

remove_quote = $(patsubst "%",%,$(1))




# Extract variabls from menuconfig
GUEST_ISA ?= $(call remove_quote,$(CONFIG_ISA))
ENGINE ?= $(call remove_quote,$(CONFIG_ENGINE))
NAME    = $(GUEST_ISA)-npc-$(ENGINE)

# Include all filelist.mk to merge file lists
FILELIST_MK = $(shell find -L ./csrc -name "filelist.mk")
include $(FILELIST_MK)

# rules for verilator
INC_PATH += $(WORK_DIR)/include 
INCFLAGS = $(addprefix -I, $(INC_PATH))
CXXFLAGS += $(INCFLAGS) -DTOP_NAME="\"V$(TOPNAME)\""



# rules for difftest
include $(NPC_HOME)/tools/difftest.mk

# Extract compiler and options from menuconfig
CC = $(call remove_quote,$(CONFIG_CC))
CFLAGS_BUILD += $(call remove_quote,$(CONFIG_CC_OPT))
CFLAGS_BUILD += $(if $(CONFIG_CC_LTO),-flto,)
CFLAGS_BUILD += $(if $(CONFIG_CC_DEBUG),-Og -ggdb3,)
CFLAGS_BUILD += $(if $(CONFIG_CC_ASAN),-fsanitize=address,)
CFLAGS_TRACE += -DITRACE_COND=$(if $(CONFIG_ITRACE_COND),$(call remove_quote,$(CONFIG_ITRACE_COND)),true)
CFLAGS  += $(CFLAGS_BUILD) $(CFLAGS_TRACE) -D__GUEST_ISA__=$(GUEST_ISA)
CFLAGS  += $(CFLAGS_BUILD) $(CFLAGS_TRACE) 

CXXFLAGS += $(CFLAGS)
$(info CXXFLAGS=$(CXXFLAGS))
#rule for BIN with respect to command goal
DEPS=$(VSOURCES) $(SIM_SRCS)

ifeq ($(MAKECMDGOALS), run_nvboard)
  DEPS += $(NVBOARD_ARCHIVE)
  SIM_SRCS += $(SRC_AUTO_BIND)
endif

#to perform simulation, we need to  add "--trace"
ifeq ($(MAKECMDGOALS), sim )
  VERILATOR_CFLAGS +=--trace
endif

ifeq ($(MAKECMDGOALS), run) 
  VERILATOR_CFLAGS +=--trace
endif

ifeq ($(MAKECMDGOALS), gdb) 
  VERILATOR_CFLAGS +=--trace
endif

#ITRACE FILES
override ARGS ?=--log=$(BUILD_DIR)/npc-log.txt
override ARGS += $(ARGS_DIFF)

#ITRACE LIBS
LDFLAGS += $(LIBS)
$(info LDFLAGS=$(LDFLAGS))

$(BIN): $(DEPS)
	@rm -rf $(OBJ_DIR)
	@$(VERILATOR) $(VERILATOR_CFLAGS) \
		--top-module $(TOPNAME) $^ \
		$(addprefix -CFLAGS , $(CXXFLAGS)) $(addprefix -LDFLAGS , $(LDFLAGS)) \
		--Mdir $(OBJ_DIR) --exe -o $(abspath $(BIN))

NPC_EXEC := $(BIN) $(ARGS) $(IMG)

all: default
	@echo "Write this Makefile by your self."

run_nvboard: $(BIN)
	@$^
	$(call git_commit, "run on Nvboard") # DO NOT REMOVE THIS LINE!!!
	@echo "Run on nvboard."
	@echo "Write this Makefile by your self."

sim: $(BIN)
	@$^
	$(call git_commit, "sim RTL") # DO NOT REMOVE THIS LINE!!!
	@echo "Simulation in verilator."
	@echo "Write this Makefile by your self."

run: $(BIN)
	$(NPC_EXEC)
	$(call git_commit, "run RTL") # DO NOT REMOVE THIS LINE!!!
	@echo "NPC Simulation test."
	@echo "Write this Makefile by your self."

verilog:
	$(call git_commit, "verilog RTL generation") 
	@echo "Generate verilog files."
	cd ./chisel-template/ && mill -i $(TOP_OJCET).runMain $(TOP_PACKAGE).$(TOP_MAIN) 

gdb: $(BIN)
	$(call git_commit, "gdb RTL") 
	gdb -s $(BIN) --args $(NPC_EXEC)
	@echo "GDB on nvboard."
	@echo "Write this Makefile by your self."
clean:
	@echo "Clean all the build files."
	rm -rf $(BUILD_DIR)
include ../Makefile
# Include rules for menuconfig
include $(NPC_HOME)/csrc/scripts/config.mk
.PHONY:default all clean sim run run_nvboard verilog gdb


